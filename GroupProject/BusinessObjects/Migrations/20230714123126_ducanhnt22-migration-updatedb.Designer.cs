// <auto-generated />
using System;
using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(BirdTransportationSystemContext))]
    [Migration("20230714123126_ducanhnt22-migration-updatedb")]
    partial class ducanhnt22migrationupdatedb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Bird", b =>
                {
                    b.Property<int>("BirdId")
                        .HasColumnType("int")
                        .HasColumnName("BirdID");

                    b.Property<string>("BirdName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BirdQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BirdType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("BirdId")
                        .HasName("PK__Bird__7694332EBEE1F1E1");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bird", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64B8D3841F7E");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OrderType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<string>("Properties")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ReceivingAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SendingAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__C3905BAF77E35A4E");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    b.Property<string>("BirdCage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BirdId")
                        .HasColumnType("int")
                        .HasColumnName("BirdID");

                    b.Property<string>("Certificate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeliveryStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("OtherItems")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderDet__D3B9D30C4E517E00");

                    b.HasIndex("BirdId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderInRoute", b =>
                {
                    b.Property<int>("OrderInRouteId")
                        .HasColumnType("int")
                        .HasColumnName("OrderInRouteID");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int")
                        .HasColumnName("RouteID");

                    b.Property<string>("Status")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("OrderInRouteId")
                        .HasName("PK__OrderInR__BC07D0C59485F650");

                    b.HasIndex("OrderId");

                    b.HasIndex("RouteId");

                    b.ToTable("OrderInRoute", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__9B556A58C1394462");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .HasColumnType("int")
                        .HasColumnName("RouteID");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ShipperId")
                        .HasColumnType("int")
                        .HasColumnName("ShipperID");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RouteId")
                        .HasName("PK__Route__80979AAD6DA8365E");

                    b.HasIndex("ShipperId");

                    b.ToTable("Route", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Shipper", b =>
                {
                    b.Property<int>("ShipperId")
                        .HasColumnType("int")
                        .HasColumnName("ShipperID");

                    b.Property<decimal?>("CodWallet")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("IncomeWallet")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShipperName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.HasKey("ShipperId")
                        .HasName("PK__Shipper__1F8AFFB9BBE4A453");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Shipper", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.TrackingOrder", b =>
                {
                    b.Property<int>("TrackingOrderId")
                        .HasColumnType("int")
                        .HasColumnName("TrackingOrderID");

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EstimateDeliveryDate")
                        .HasColumnType("date");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("TrackingStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.HasKey("TrackingOrderId")
                        .HasName("PK__Tracking__24D0CD62496122C9");

                    b.HasIndex("OrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("TrackingOrder", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("WarehouseManagerId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseManagerID");

                    b.Property<string>("WarehouseName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WarehouseId")
                        .HasName("PK__Warehous__2608AFD9C650A74A");

                    b.HasIndex("WarehouseManagerId");

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.WarehouseManager", b =>
                {
                    b.Property<int>("WarehouseManagerId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseManagerID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("WarehouseManagerName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WarehouseManagerId")
                        .HasName("PK__Warehous__678D8266D49A4657");

                    b.ToTable("WarehouseManager", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Bird", b =>
                {
                    b.HasOne("BusinessObjects.Models.Customer", "Customer")
                        .WithMany("Birds")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Bird__CustomerID__4D94879B");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.HasOne("BusinessObjects.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Order__CustomerI__45F365D3");

                    b.HasOne("BusinessObjects.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK__Order__PaymentID__46E78A0C");

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.HasOne("BusinessObjects.Models.Bird", "Bird")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BirdId")
                        .HasConstraintName("FK__OrderDeta__BirdI__5165187F");

                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderDeta__Order__5070F446");

                    b.Navigation("Bird");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderInRoute", b =>
                {
                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("OrderInRoutes")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderInRo__Order__5441852A");

                    b.HasOne("BusinessObjects.Models.Route", "Route")
                        .WithMany("OrderInRoutes")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK__OrderInRo__Route__5535A963");

                    b.Navigation("Order");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BusinessObjects.Models.Route", b =>
                {
                    b.HasOne("BusinessObjects.Models.Shipper", "Shipper")
                        .WithMany("Routes")
                        .HasForeignKey("ShipperId")
                        .HasConstraintName("FK__Route__ShipperID__4316F928");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("BusinessObjects.Models.Shipper", b =>
                {
                    b.HasOne("BusinessObjects.Models.Warehouse", "Warehouse")
                        .WithMany("Shippers")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK__Shipper__Warehou__403A8C7D");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BusinessObjects.Models.TrackingOrder", b =>
                {
                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("TrackingOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__TrackingO__Order__4AB81AF0");

                    b.HasOne("BusinessObjects.Models.Warehouse", "Warehouse")
                        .WithMany("TrackingOrders")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK__TrackingO__Wareh__49C3F6B7");

                    b.Navigation("Order");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("BusinessObjects.Models.Warehouse", b =>
                {
                    b.HasOne("BusinessObjects.Models.WarehouseManager", "WarehouseManager")
                        .WithMany("Warehouses")
                        .HasForeignKey("WarehouseManagerId")
                        .HasConstraintName("FK__Warehouse__Wareh__3D5E1FD2");

                    b.Navigation("WarehouseManager");
                });

            modelBuilder.Entity("BusinessObjects.Models.Bird", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObjects.Models.Customer", b =>
                {
                    b.Navigation("Birds");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("OrderInRoutes");

                    b.Navigation("TrackingOrders");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObjects.Models.Route", b =>
                {
                    b.Navigation("OrderInRoutes");
                });

            modelBuilder.Entity("BusinessObjects.Models.Shipper", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("BusinessObjects.Models.Warehouse", b =>
                {
                    b.Navigation("Shippers");

                    b.Navigation("TrackingOrders");
                });

            modelBuilder.Entity("BusinessObjects.Models.WarehouseManager", b =>
                {
                    b.Navigation("Warehouses");
                });
#pragma warning restore 612, 618
        }
    }
}
